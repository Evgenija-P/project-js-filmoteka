{"mappings":"iiBAAAA,EAAA,SAAAC,SAA8CC,KAAKC,MAAM,gMCAzDH,EAAA,SCAA,I,EAAAI,EAAAJ,EAAA,S,gBCAAI,EAAAJ,EAAA,S,kEAIeK,ECJZ,W,sBDIkBC,I,aAEjBC,KAAKC,KAAO,E,gBAGRC,IAAA,c,MAAN,W,kBAAAC,EAAAN,EAAA,CAAAM,EAAAC,GAAAC,MAAA,SAAAC,I,IACQC,E,kFAAiBJ,EAAAK,GAAMC,IAC3B,GAAuCC,OAApCC,EAAAC,IAAI,kCAAwCF,OAARC,EAAAE,QAAQ,Y,cAD3CN,EAAQO,EAAAC,KAGdC,EAAKC,gB,kBAEEV,G,0CANT,K,CAQAL,IAAA,gB,MAAA,WACEF,KAAKC,MAAQ,M,EClBd,GCAHiB,EAAAzB,EAAA,SAEO,SAAS0B,EAAaC,GAC3B,OAAOA,EACJC,KAAI,SAAAC,G,IAAGC,EAAWD,EAAXC,YAAaC,EAAKF,EAALE,MAAOC,EAASH,EAATG,UAAWC,EAAYJ,EAAZI,aAAcC,EAAEL,EAAFK,GAC7CC,EAAO,IAAIC,KAAKH,GAAcI,cACpC,OAAIP,EACK,gCAEsDb,OADxCiB,EAAG,2EAC0DjB,OAArBa,EAAY,WAGvEb,OAHgFc,EAAM,qFAI3Dd,OAD3Bc,EAAM,gDAGCd,QAFoB,EAAAQ,EAAAa,mBACzBN,GACA,OAAUf,OAALkB,EAAK,yCAIT,iCAEyBlB,OADRiB,EAAG,4CACkBjB,OAAbP,EAAA6B,GAAI,WAEhCtB,OAFyCc,EAAM,mDAGpBd,OAD3Bc,EAAM,gDAGCd,QAFoB,EAAAQ,EAAAa,mBACzBN,GACA,OAAUf,OAALkB,EAAK,sCAIjBK,KAAK,IC9BVD,EAAiBvC,EAAA,SAAAyC,aAA6C,SAAWzC,EAAA,SAAA0C,QAA6C,S,iBCAhHC,EAAsBC,SAASC,cAAc,yBAEnD,SAASC,EAAWtC,EAAMuC,GACxB,IACMC,EAAaxC,EAAO,EACpByC,EAAczC,EAAO,EACrB0C,EAAY1C,EAAO,EACLA,EACpB,IAAI2C,EAAS,GACT3C,EAAO,IACT2C,GAAU,sBAER3C,EAAO,IACT2C,GAAU,cAER3C,EAAO,IACT2C,GAAU,gBAER3C,EAAO,IACT2C,GAAU,OAAoBlC,OAhBXT,EAAO,EAgBI,UAE5BA,EAAO,IACT2C,GAAU,OAAkBlC,OAAX+B,EAAW,UAE9BG,GAAU,OAAYlC,OAALT,EAAK,SAClBuC,EAAa,EAAIvC,IACnB2C,GAAU,OAAiBlC,OAAViC,EAAU,UAEzBH,EAAa,EAAIvC,IACnB2C,GAAU,OAAmBlC,OAAZgC,EAAY,UAE3BF,EAAa,EAAIvC,IACnB2C,GAAW,gBAETJ,EAAavC,IACf2C,GAAU,OAAkBlC,OAAX8B,EAAW,SAC5BI,GAAU,sBAEZC,QAAQC,IAAIN,GACZJ,EAAoBW,UAAYH,EAsBlCR,EAAoBY,iBAAiB,SApBrC,SAAsBC,GACpB,GAA8B,OAA1BA,EAAMC,OAAOC,UAGgB,QAA7BF,EAAMC,OAAOE,YAGjB,GAAiC,OAA7BH,EAAMC,OAAOE,YAIjB,GAAiC,OAA7BH,EAAMC,OAAOE,YAAjB,CAIA,IAAMnD,EAAOgD,EAAMC,OAAOE,YAE1BP,QAAQC,IAAIG,EAAMC,QAClBL,QAAQC,IAAI,mBAAoB7C,QANT,OAJA,KL7CzB,IAAMoD,EAAS,IAAIvD,EACbwD,EAAO,CACXC,QAASlB,SAASC,cAAc,uB,SAGZkB,I,OAAAA,EAAfrD,EAAAN,EAAA,CAAAM,EAAAC,GAAAC,MAAA,SAAAC,I,IAEKmD,E,2FAAeJ,EAAOK,c,OAAxBD,EAAM3C,EAAAC,KAAJ0C,KACRH,EAAKC,QAAQI,mBAAmB,YAAaxC,EAAasC,EAAKG,UAC/DrB,EAAWkB,EAAKxD,KAAMwD,EAAKI,a,gDAE3BhB,QAAQC,IAAIhC,EAAAgD,GAAMC,S,0DANkBC,MAAAhE,KAAAiE,WASxCC,EAAAC,QAAQC,KAAK,CACXC,SAAU,Q,WAVUb,EAAkBQ,MAAAhE,KAAAiE,WAYxCK,GACAJ,EAAAC,QAAQI,S","sources":["node_modules/@parcel/runtime-js/lib/runtime-2299ea3fbcd794e9.js","src/index.js","src/js/append-movie-cards.js","src/js/fetch-movies-homepg.js","<<jsx-config-pragma.js>>","src/js/markup-movie-card.js","node_modules/@parcel/runtime-js/lib/runtime-074636b54421f431.js","src/js/pagination.js"],"sourcesContent":["require('./helpers/bundle-manifest').register(JSON.parse(\"{\\\"EVgbq\\\":\\\"index.58c1f4b7.js\\\",\\\"jXq3O\\\":\\\"foto.88e9f0bc.jpg\\\",\\\"5UbS1\\\":\\\"index.be9cc2d9.css\\\",\\\"6IIJ4\\\":\\\"my-library.368e8651.js\\\"}\"));","import './js/add-watch_queue';\nimport './js/append-movie-cards';\nimport './js/button-up-down';\nimport './js/fetch-movies';\nimport './js/film-modal';\nimport './js/group-modal';\nimport './js/open-film-modal';\nimport './js/search-movies';\nimport './js/pagination';\n","import NewApi from './fetch-movies-homepg';\nimport { markupMovies } from './markup-movie-card';\nimport { Loading } from 'notiflix/build/notiflix-loading-aio';\nimport { pagination } from './pagination';\nconst newApi = new NewApi();\nconst refs = {\n  gallery: document.querySelector('#homepage__gallery'),\n};\n\nexport async function appendMarkupMovies() {\n  try {\n    const { data } = await newApi.fetchMovies();\n    refs.gallery.insertAdjacentHTML('beforeend', markupMovies(data.results));\n    pagination(data.page, data.total_pages);\n  } catch (error) {\n    console.log(error.message);\n  }\n}\nLoading.dots({\n  svgColor: 'red',\n});\nappendMarkupMovies();\nLoading.remove();\n","import axios from 'axios';\n\nimport { API_KEY, URL } from './variables';\n\nexport default class NewApi {\n  constructor() {\n    this.page = 1;\n  }\n\n  async fetchMovies() {\n    const response = await axios.get(\n      `${URL}/3/trending/movie/day?api_key=${API_KEY}&page=5`\n    );\n    this.incrementPage();\n\n    return response;\n  }\n  incrementPage() {\n    this.page += 1;\n  }\n}\n",null,"import { findGenresOfMovie } from './find-genres-of-popular-movies';\nimport img from '../images/foto.jpg';\nexport function markupMovies(movies) {\n  return movies\n    .map(({ poster_path, title, genre_ids, release_date, id }) => {\n      const date = new Date(release_date).getFullYear();\n      if (poster_path) {\n        return `\n      <li class=\"card\" id=\"${id}\">\n        <img class=\"card__img\" src=\"https://image.tmdb.org/t/p/w400${poster_path}\" alt=\"${title}\" />\n        <div class=\"card__wrap\">\n        <p class=\"card__titel\">\n        ${title} <br />\n          <span class=\"card__text\">${findGenresOfMovie(\n            genre_ids\n          )} | ${date}</span>\n        </p> </div>\n  </li>`;\n      }\n      return `\n      <div class=\"card\" id=\"${id}\">\n        <img class=\"card__img\" src=\"${img}\" alt=\"${title}\" />\n        <p class=\"card__titel\">\n        ${title} <br />\n          <span class=\"card__text\">${findGenresOfMovie(\n            genre_ids\n          )} | ${date}</span>\n        </p>\n  </div>`;\n    })\n    .join('');\n}\n","module.exports = require('./helpers/bundle-url').getBundleURL('EVgbq') + require('./helpers/bundle-manifest').resolve(\"jXq3O\");","const paginationContainer = document.querySelector('.pagination-container');\nlet globalCurrentPage = null;\nfunction pagination(page, totalPages) {\n  const beforeToPage = page - 2;\n  const beforePage = page - 1;\n  const afterToPage = page + 2;\n  const afterPage = page + 1;\n  globalCurrentPage = page;\n  let marcup = '';\n  if (page > 1) {\n    marcup += '<li>&#129144;</li>';\n  }\n  if (page > 1) {\n    marcup += '<li>1</li>';\n  }\n  if (page > 4) {\n    marcup += '<li>...</li>';\n  }\n  if (page > 3) {\n    marcup += `<li>${beforeToPage}</li>`;\n  }\n  if (page > 2) {\n    marcup += `<li>${beforePage}</li>`;\n  }\n  marcup += `<li>${page}</li>`;\n  if (totalPages - 1 > page) {\n    marcup += `<li>${afterPage}</li>`;\n  }\n  if (totalPages - 2 > page) {\n    marcup += `<li>${afterToPage}</li>`;\n  }\n  if (totalPages - 3 > page) {\n    marcup += `<li>...</li>`;\n  }\n  if (totalPages > page) {\n    marcup += `<li>${totalPages}</li>`;\n    marcup += '<li>&#129146;</li>';\n  }\n  console.log(totalPages);\n  paginationContainer.innerHTML = marcup;\n}\nfunction onPagination(event) {\n  if (event.target.nodeName !== 'LI') {\n    return;\n  }\n  if (event.target.textContent === '...') {\n    return;\n  }\n  if (event.target.textContent === 'ü°∏') {\n    globalCurrentPage -= 1;\n    return;\n  }\n  if (event.target.textContent === 'ü°∫') {\n    globalCurrentPage += 1;\n    return;\n  }\n  const page = event.target.textContent;\n\n  console.log(event.target);\n  console.log('–¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞', page);\n}\npaginationContainer.addEventListener('click', onPagination);\nexport { pagination };\n"],"names":["parcelRequire","register","JSON","parse","$bpxeT","$751852237bab4078$export$2e2bcd8739ae039","NewApi","this","page","key","$parcel$interopDefault","$2TvXO","mark","_callee","response","$dIxxU","get","concat","$8oFZ1","URL","API_KEY","_ctx","sent","_this","incrementPage","$axuPv","$d7da01d1ea7c1182$export$2000cb3382d6fe40","movies","map","param","poster_path","title","genre_ids","release_date","id","date","Date","getFullYear","findGenresOfMovie","$0b521630115e397b$exports","join","getBundleURL","resolve","$dfaf77c789ce7a24$var$paginationContainer","document","querySelector","$dfaf77c789ce7a24$export$22fa394f3ba39578","totalPages","beforePage","afterToPage","afterPage","marcup","console","log","innerHTML","addEventListener","event","target","nodeName","textContent","$f8ac2927277a9804$var$newApi","$f8ac2927277a9804$var$refs","gallery","$f8ac2927277a9804$var$_appendMarkupMovies","data","fetchMovies","insertAdjacentHTML","results","total_pages","t0","message","apply","arguments","$7rQOT","Loading","dots","svgColor","$f8ac2927277a9804$export$513f1e42f4faf942","remove"],"version":3,"file":"index.58c1f4b7.js.map"}